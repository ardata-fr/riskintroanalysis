% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ri-entry-point-risk.R
\name{calc_entry_point_risk}
\alias{calc_entry_point_risk}
\title{Calculate entry point risk}
\usage{
calc_entry_point_risk(
  entry_points,
  epi_units,
  emission_risk,
  scaling_args = list(illegal_factor = 3, coef_legal = 1, coef_illegal = 1, max_risk =
    100)
)
}
\arguments{
\item{entry_points}{The entry points dataset as formatted and validated by
\code{\link[riskintrodata:validate_dataset]{riskintrodata::validate_dataset()}}. This should be an \code{sf} object containing points and emission risks.}

\item{epi_units}{The epidemiological units dataset as formatted and validated by
\code{\link[riskintrodata:validate_dataset]{riskintrodata::validate_dataset()}}. This should be an \code{sf} object with polygons.}

\item{emission_risk}{The emission risk dataset as returned by the \code{\link[=calc_emission_risk]{calc_emission_risk()}}
function.}

\item{scaling_args}{list of arguments to pass to \code{\link[=scale_entry_points]{scale_entry_points()}}. Accepted
arguments are \code{illegal_factor}, \code{coef_legal} and \code{coef_illegal}. Other arguments
are handled internally.}
}
\value{
an \code{sf} dataset containing the following columns:
\itemize{
\item \code{eu_id}: epidemiological units id (from \code{epi_units} dataset)
\item \code{eu_name}: epidemiological units name (from \code{epi_units} dataset)
\item \code{entry_points_risk }: weighted entry point risk score
\item \code{risk_sources}: informative HTML labels to be used in Leaflet plots
}

This dataset also has a \strong{number of attributes} that are used in other
functions from \code{riskintroanalysis} to make passing dataset metadata between
functions more user-friendly.
\enumerate{
\item \code{points}: is an \code{sf} dataset containing the aggregated emission risk score
for each point.  It can be easily accessed with \code{\link[=extract_point_risk]{extract_point_risk()}}
and has the following columns:
\itemize{
\item \code{point_id}: unique identifier for entry points
\item \code{point_name}: names of entry points
\item \code{mode}: legality or illegality of the entry point
\item \code{type}: transport type of the entry point
\item \code{source}: string of concatenated source countries of entry point
\item \code{points_label }: HTML label for use in leaflet tooltips
\item Also attributes: \code{risk_col = "point_emission_risk"} and
\code{risk_scale = c(0,12)}
}
\item \code{risk_col = "entry_points_risk"} used by \code{\link[=plot_risk]{plot_risk()}}
\item \code{table_name = "entry_points"}used by \code{\link[=plot_risk]{plot_risk()}}
\item \code{scale = c(0, 12)} used by \code{\link[=plot_risk]{plot_risk()}} and \code{\link[=rescale_risk_scores]{rescale_risk_scores()}}
}
}
\description{
Calculating the risk of introduction through entry points within each
epidemiological unit.

See the \href{https://astre.gitlab.cirad.fr/riskintro-app/riskintroanalysis/articles/entry-points-analysis.html}{Entry points analysis}
article for more information or run \code{vignette("entry-points-analysis")}
}
\details{
If an entry point is not within the area of an epidemiological unit, it
will be allocated to the nearest one.
}
\examples{
library(riskintrodata)
library(riskintroanalysis)
library(dplyr)

entry_points_fp <-
  system.file(
    package = "riskintrodata",
    "samples",
    "tunisia",
    "entry_points",
    "BORDER_CROSSING_POINTS.csv"
  )

entry_points <- readr::read_csv(entry_points_fp)

entry_points <- validate_dataset(
  x = entry_points,
  table_name = "entry_points",
  point_name = "NAME",
  lng = "LONGITUDE_X",
  lat = "LATITUDE_Y",
  mode = "MODE",
  type = "TYPE",
  sources = "SOURCES"
) |>
  extract_dataset()

tunisia_raw <- sf::read_sf(system.file(
  package = "riskintrodata",
  "samples",
  "tunisia",
  "epi_units",
  "tunisia_adm2_raw.gpkg"
))

# Apply mapping to prepare colnames and validate dataset
tunisia <- validate_dataset(
  x = tunisia_raw,
  table_name = "epi_units",
  eu_name = "NAME_2",
  geometry = "geom"
) |>
  extract_dataset()

algeria <- riskintrodata::erf_row(
  iso3 = "DZA",
  country = "Algeria",
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds",
  disease_notification = 0,
  targeted_surveillance = 1,
  general_surveillance = 0,
  screening = 1,
  precautions_at_the_borders = 1,
  slaughter = 1,
  selective_killing_and_disposal = 1,
  zoning = 1,
  official_vaccination = 1,
  last_outbreak_end_date = as.Date("30/06/2023"),
  commerce_illegal = 0L,
  commerce_legal = 0L
)

libya <- riskintrodata::erf_row(
  iso3 = "LBY",
  country = "Libya",
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds",
  disease_notification = TRUE,
  targeted_surveillance = 1,
  general_surveillance = 0,
  screening = 1,
  precautions_at_the_borders = 0,
  slaughter = 1,
  selective_killing_and_disposal = 1,
  zoning = 1,
  official_vaccination = 1,
  last_outbreak_end_date = as.Date("30/06/2019"),
  commerce_illegal = 0L,
  commerce_legal = 1
)

wahis_erf <- riskintrodata::get_wahis_erf(
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds"
)

emission_risk_factors <- dplyr::bind_rows(
  algeria,
  libya,
  wahis_erf
)

emission_risk_table <- calc_emission_risk(
  emission_risk_factors = emission_risk_factors
)

ri_entry_points <- calc_entry_point_risk(
  entry_points = entry_points,
  epi_units = tunisia,
  emission_risk = emission_risk_table
)

plot_risk(ri_entry_points)

extract_point_risk(ri_entry_points)

attributes(ri_entry_points)
}
