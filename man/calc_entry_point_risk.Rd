% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ri-entry-point-risk.R
\name{calc_entry_point_risk}
\alias{calc_entry_point_risk}
\title{Calculate entry point risk}
\usage{
calc_entry_point_risk(entry_points, epi_units, emission_risk)
}
\arguments{
\item{entry_points}{The entry points dataset as formatted and validated by \code{\link[=apply_mapping]{apply_mapping()}} and
\code{\link[=mapping_entry_points]{mapping_entry_points()}}. This should be an \code{sf} object containing points and emission risks.}

\item{epi_units}{The epidemiological units dataset as formatted and validated by \code{\link[=apply_mapping]{apply_mapping()}} and
\code{\link[=mapping_epi_units]{mapping_epi_units()}}. This should be an \code{sf} object with polygons.}

\item{emission_risk}{The emission risk dataset as returned by the \code{\link[=calc_emission_risk]{calc_emission_risk()}}
function.}
}
\value{
an \code{sf} dataset containing the following columns:
\itemize{
\item \code{eu_id}: epidemiological units id (from \code{epi_units} dataset)
\item \code{eu_name}: epidemiological units name (from \code{epi_units} dataset)
\item \code{entry_points_risk }: weighted entry point risk score
\item \code{risk_sources}: informative HTML labels to be used in Leaflet plots
}

This dataset also has a \strong{number of attributes} that are used in other
functions from \code{riskintroanalysis} to make passing dataset metadata between
functions more user-friendly.
\enumerate{
\item \code{points}: is a \code{sf} dataset containing describing the entry points and their
associated emission risk. It can be easily accessed with \code{\link[=extract_point_risk]{extract_point_risk()}}
and has the following columns:
\itemize{
\item \code{point_id}:
\item \code{point_name}:
\item \code{mode}:
\item \code{type}:
\item \code{source}:
}
\item Points (name: \code{points}) dataset contains the aggregated emission risk score for each
entry point.
\item Epidemiological units (name: \code{epi_units}) dataset containing the weighted
average of each of points' emission risk scores within its area, this is the
risk of introduction by entry points.
}
}
\description{
Calculating the entry point risk associated with each epidemiological unit.

The first step is calculating the points dataset: each
point located within an epidemiological unit is linked to one or more source countries from
which animals enter into the epidemiological unit. For each point the emission
risk of the source countries is averaged. This provides an average emission risk score
for each point.

The second step is creating the epidemiologcal units introduction risk dataset by
joining th points dataset with epidemiological units and
finding the average emission risk score for each entry points within each
area. This gives a risk of introduction for each epidemiological unit.
}
\examples{
library(riskintroanalysis)
library(dplyr)

entry_points_fp <-
  system.file(
    package = "riskintrodata",
    "samples",
    "tunisia",
    "entry_points", "BORDER_CROSSING_POINTS.csv"
  )

entry_points <- readr::read_csv(entry_points_fp)

entry_points <- apply_mapping(
  dataset = entry_points,
  mapping = mapping_entry_points(
    point_name = "NAME",
    lng = "LONGITUDE_X",
    lat = "LATITUDE_Y",
    mode = "MODE",
    type = "TYPE",
    sources = "SOURCES"
  ),
  validate = TRUE
)

tunisia_raw <- sf::read_sf(system.file(
  package = "riskintrodata",
  "samples", "tunisia", "epi_units", "tunisia_adm2_raw.gpkg"
))

# Apply mapping to prepare colnames and validate dataset
tunisia <- apply_mapping(
  tunisia_raw,
  mapping = mapping_epi_units(
    eu_name = "NAME_2",
    geometry = "geom"
  ),
  validate = TRUE
)

algeria <- riskintrodata::erf_row(
  iso3 = "DZA",
  country = "Algeria",
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds",
  disease_notification = 0,
  targeted_surveillance = 1,
  general_surveillance = 0,
  screening = 1,
  precautions_at_the_borders = 1,
  slaughter = 1,
  selective_killing_and_disposal = 1,
  zoning = 1,
  official_vaccination = 1,
  last_outbreak_end_date = as.Date("30/06/2023"),
  commerce_illegal = 0L,
  commerce_legal = 0L
)

libya <- riskintrodata::erf_row(
  iso3 = "LBY",
  country = "Libya",
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds",
  disease_notification = TRUE,
  targeted_surveillance = 1,
  general_surveillance = 0,
  screening = 1,
  precautions_at_the_borders = 0,
  slaughter = 1,
  selective_killing_and_disposal = 1,
  zoning = 1,
  official_vaccination = 1,
  last_outbreak_end_date = as.Date("30/06/2019"),
  commerce_illegal = 0L,
  commerce_legal = 1
)

wahis_erf <- riskintrodata::get_wahis_erf(
  disease = "Avian infectious laryngotracheitis",
  animal_category = "Domestic",
  species = "Birds"
)

emission_risk_factors <- dplyr::bind_rows(
  algeria,
  libya,
  wahis_erf
)

emission_risk_table <- calc_emission_risk(emission_risk_factors = emission_risk_factors)

ri_entry_points <- calc_entry_point_risk(
  entry_points = entry_points,
  epi_units = tunisia,
  emission_risk = emission_risk_table
)

plot_risk(ri_entry_points)
}
