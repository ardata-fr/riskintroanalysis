% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ri-rescale_risk.R
\name{rescale_risk}
\alias{rescale_risk}
\title{Scaling range transformation function (re-scaling)}
\usage{
rescale_risk(
  dataset,
  risk_col,
  method = c("linear", "quadratic", "exponential", "sigmoid"),
  inverse = FALSE,
  from,
  to = c(0, 100),
  new_col = NULL
)
}
\arguments{
\item{dataset}{dataset to add scaled risk column to.}

\item{risk_col}{Column containing numeric vector of risk values in the range [0, 12].}

\item{method}{The scaling method to apply. Options are \code{"linear"}, \code{"quadratic"},
\code{"exponential"}, \code{"sigmoid"}, or \code{"complementary"}.}

\item{inverse}{boolean to inverse the risk values, i.e. low becomes high, and
high becomes low. Similar to the \code{"complementary"} value of method, but can be
added to quadratic.}

\item{from}{existing range of possible values for \code{risk_col} that will be converted to}

\item{to}{new range of possible values for \code{risk_col}, by default it is 0 to 100.}

\item{new_col}{string, The name of the new scaled column, defaults to \verb{\{method\}_scaled_\{risk_col\}}.
If set to \code{NA} the scaled column will replace the existing column.}
}
\value{
A dataset with new column containing  numeric vector of scaled values in the range [0, 100].
}
\description{
This function supports multiple scaling methods to transform risk values from
an existing range to  another. By default the output range is between 0 and 100.
}
\details{
Below are the equations used for each method:

\strong{Linear Scaling}
\deqn{f(x) = \frac{x - 0}{12 - 0} \cdot (100 - 0) + 0}

\strong{Quadratic Scaling}
\deqn{f(x) = \left(\frac{x - 0}{12 - 0}\right)^2 \cdot (100 - 0) + 0}

\strong{Exponential Scaling}
\deqn{f(x) = \frac{\exp(x / 12) - 1}{\exp(1) - 1} \cdot (100 - 0) + 0}

\strong{Sigmoid Scaling}
\deqn{f(x) = \frac{100}{1 + \exp(-10 \cdot (\frac{x}{12} - 0.5))}}
}
\examples{
# rescale_risk -----
library(riskintro)

dat <- data.frame(RISK = seq(0, 12, by = 0.01))

dat_scaled <- rescale_risk(
  dataset = dat, risk_col = "RISK",
  method = "linear",
  from = c(0, 12),
  to = c(0, 100)
) |>
  rescale_risk(
    risk_col = "RISK",
    method = "quadratic",
    from = c(0, 12),
    to = c(0, 100)
  ) |>
  rescale_risk(
    risk_col = "RISK",
    method = "exponential",
    from = c(0, 12),
    to = c(0, 100)
  ) |>
  rescale_risk(
    risk_col = "RISK",
    method = "sigmoid",
    from = c(0, 12),
    to = c(0, 100)
  )

if (require(ggplot2) && require(tidyr) && require(tidyselect)) {
  # Plot it !
  dat_scaled |>
    pivot_longer(cols = -RISK, names_to = "method", values_to = "scaled") |>
    ggplot(aes(x = RISK, y = scaled, color = method)) +
    geom_line()
}
}
