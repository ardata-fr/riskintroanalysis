% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ri-border-risk.R
\name{calc_border_lengths}
\alias{calc_border_lengths}
\title{Get Shared Borders Between EUs and Bordering Countries}
\usage{
calc_border_lengths(epi_units, eu_id_col, bordering_countries, bc_id_col)
}
\arguments{
\item{epi_units}{An \code{sf} object containing the epidemiological units. Should containg only polygons.}

\item{eu_id_col}{A string specifying the column name in \code{epi_units} that identifies each EU.}

\item{bordering_countries}{An \code{sf} object containing the bordering countries.}

\item{bc_id_col}{A string specifying the column name in \code{bordering_countries} that identifies each country.}
}
\value{
An \code{sf} object containing shared borders between EUs and bordering countries,
with calculated border lengths and weights.
}
\description{
This function identifies shared borders between epidemiological units (EUs) and neighbouring countries.
It accounts for small discrepancies in border alignments and adjusts accordingly using an
algorithm that loops over all overlapping and divergent polygons.

This can take some time to run.

Distances are calculated using projection crs 6933 and uses s2. However, output remains WGS84.
}
\examples{
library(sf)
library(dplyr)

# Create example epidemiological units (epi_units)
epi_units <- st_as_sf(
  data.frame(
    EU_ID = c("EU1", "EU2"),
    geometry = st_sfc(
      st_polygon(list(matrix(c(0, 0, 2, 0, 2, 2, 0, 2, 0, 0), ncol = 2, byrow = TRUE))),
      st_polygon(list(matrix(c(2, 0, 4, 0, 4, 2, 2, 2, 2, 0), ncol = 2, byrow = TRUE)))
    ),
    stringsAsFactors = FALSE
  ),
  crs = 4326
)

# Create example bordering countries (bordering_countries)
bordering_countries <- st_as_sf(
  data.frame(
    BC_ID = c("BC1"),
    geometry = st_sfc(
      st_polygon(list(matrix(c(2, 0, 6, 0, 6, 4, 2, 4, 2, 0), ncol = 2, byrow = TRUE)))
    ),
    stringsAsFactors = FALSE
  ),
  crs = 4326
)

# Run function to get shared borders
shared_borders <- calc_border_lengths(
  epi_units = epi_units,
  eu_id_col = "EU_ID",
  bordering_countries = bordering_countries,
  bc_id_col = "BC_ID"
)

# Print output
print(shared_borders)

# Visualize using a simple plot
plot(st_geometry(epi_units), col = "lightblue", border = "blue", main = "Shared Borders")
plot(st_geometry(bordering_countries), col = "pink", border = "red", add = TRUE)
plot(st_geometry(shared_borders), col = "black", lwd = 2, add = TRUE)
}
