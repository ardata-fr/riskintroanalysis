% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_risk.R
\name{plot_risk}
\alias{plot_risk}
\alias{plot_entry_points}
\alias{plot_animal_mobility}
\alias{plot_road_access}
\alias{plot_border_risk}
\alias{plot_epi_units}
\alias{plot_risk_table}
\title{Plot risk}
\usage{
plot_risk(
  dataset,
  risk_name = NULL,
  risk_col = NULL,
  scale = NULL,
  interactive = FALSE
)

plot_entry_points(dataset, scale, risk_col)

plot_animal_mobility(dataset, scale, risk_col)

plot_road_access(dataset, scale, risk_col)

plot_border_risk(dataset, scale, risk_col)

plot_border_risk(dataset, scale, risk_col)

plot_epi_units(dataset, scale, risk_col)

plot_risk_table(dataset, scale, risk_col)
}
\arguments{
\item{dataset}{risk table, generally the output of a}

\item{risk_name}{risk_name used to determine which plotting function to use,
this is NULL by default and is inferred from \code{attr(x, "table_name")}.}

\item{risk_col}{the risk column to represent in the visualisation,
this is NULL by default and is inferred from \code{attr(x, "risk_col")}.}

\item{scale}{the scale of \code{risk_col}, numeric vector of length 2,
this is NULL by default and is inferred from \code{attr(x, "scale")}.}

\item{interactive}{default to FALSE for ggplot2 visuals, TRUE returns
interactive leaflet.}
}
\value{
ggplot2 object with the appropriate visualisation if interactive is FALSE,
otherwise, leaflet object
}
\description{
Helper function to plot riskintro's default risks using ggplot2.
}
\examples{
tunisia_raw <- sf::read_sf(system.file(
  package = "riskintrodata",
  "samples", "tunisia", "epi_units", "tunisia_adm2_raw.gpkg"
))

# Apply mapping to prepare colnames and validate dataset
tunisia <- apply_mapping(
  tunisia_raw,
  mapping = mapping_epi_units(
    eu_name = "NAME_2",
    geometry = "geom"
  ),
  validate = TRUE
)

entry_points_fp <-
  system.file(
    package = "riskintrodata",
    "samples",
    "tunisia",
    "entry_points", "BORDER_CROSSING_POINTS.csv"
  )

entry_points <- readr::read_csv(entry_points_fp)

entry_points <- apply_mapping(
  dataset = entry_points,
  mapping = mapping_entry_points(
    point_name = "NAME",
    lng = "LONGITUDE_X",
    lat = "LATITUDE_Y",
    mode = "MODE",
    type = "TYPE",
    sources = "SOURCES"
  ),
  validate = TRUE
)

ri_entry_points <- calc_entry_point_risk(
  entry_points = entry_points,
  epi_units = tunisia,
  emission_risk =
    calc_emission_risk(
      emission_risk_factors = riskintrodata::get_wahis_erf(
        disease = "Anthrax",
        species = "Cattle",
        animal_category = "Domestic"
      )
    )
) |>
  rescale_risk_scores()

plot_risk(ri_entry_points)
}
